package com.github.adminfaces.starter.bean;

import com.github.adminfaces.persistence.bean.CrudMB;
import com.github.adminfaces.persistence.service.CrudService;
import com.github.adminfaces.persistence.service.Service;
import com.github.adminfaces.persistence.util.Messages;
import com.github.adminfaces.template.exception.BusinessException;
import org.omnifaces.cdi.ViewScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.Serializable;
import java.util.List;

import ${entity.getQualifiedName()};
import ${service.getQualifiedName()};

import static com.github.adminfaces.persistence.util.Messages.addDetailMessage;
import static com.github.adminfaces.persistence.util.Messages.getMessage;
import static com.github.adminfaces.template.util.Assert.has;


@Named
@ViewScoped
public class ${entity.getName()}ListMB extends CrudMB<${entity.getName()}> implements Serializable {

    @Inject
    ${entity.getName()}Service ${ccEntity}Service;

    @Inject
    public void initService() {
        setCrudService(${ccEntity}Service);
    }

    public void delete() {
        int deletedEntities = 0;
        for (${entity.getName()} selected : selectionList) {
        	deletedEntities++;
        	${ccEntity}Service.remove(selected);
        }
        selectionList.clear();
        addDetailMessage(deletedEntities + " ${ccEntity}(s) deleted successfully!");
        clear();
    }

    /**
     * Used in datatable footer to display current search criteria
     */
    public String getSearchCriteria() {
        StringBuilder sb = new StringBuilder(21);
        ${entity.getName()} ${ccEntity}Filter = filter.getEntity();
<#list fields as field>
    <#if field.getName() != "serialVersionUID" && field.getName() != "version">
        ${field.getType().getSimpleName()} ${field.getName()} = null;
        if(filter.hasParam("${field.getName()}")) {
            ${field.getName()} = (${field.getType().getSimpleName()})filter.getParam("${field.getName()}");
        } else if(has(${ccEntity}Filter.get${field.getName()?cap_first}())) {
             ${field.getName()} = ${ccEntity}Filter.get${field.getName()?cap_first}();
        }
        if(has(${field.getName()})) {
	    <#assign s = "<b>${field.getName()}</b>:">
	        sb.append("${s} ").append(${ccEntity}Filter.get${field.getName()?cap_first}()).append(", ");
	    }
	</#if>
</#list>
        int commaIndex = sb.lastIndexOf(",");
        if (commaIndex != -1) {
            sb.deleteCharAt(commaIndex);
        }

        if (sb.toString().trim().isEmpty()) {
            return getMessage("empty-search-criteria");
        }

        return sb.toString();
    }

}
