package com.github.adminfaces.starter.bean;

import com.github.adminfaces.persistence.bean.CrudMB;
import com.github.adminfaces.persistence.util.Messages;
import com.github.adminfaces.template.exception.BusinessException;
import org.omnifaces.cdi.ViewScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.Serializable;

import ${entity.getQualifiedName()};
import ${service.getQualifiedName()};

import static com.github.adminfaces.persistence.util.Messages.addDetailMessage;
import static com.github.adminfaces.persistence.util.Messages.getMessage;
import static com.github.adminfaces.template.util.Assert.has;

import java.util.*;
<#list fields as field>
   <#if entity.hasToManyAssociation(field)>
import ${entity.getArrayType(field).getQualifiedName()};   
   <#elseif entity.hasToOneAssociation(field)>
import ${field.getType().getQualifiedName()};      
   </#if> 
</#list>

<#assign service = "${ccEntity}Service">

@Named
@ViewScoped
public class ${entity.getName()}ListMB extends CrudMB<${entity.getName()}> implements Serializable {

    @Inject
    ${entity.getName()}Service ${service};

<#list toManyFields as field>
    List<${entity.getArrayType(field).getSimpleName()}> ${ccEntity}${field.getName()?cap_first};
</#list>

<#list toManyFields as field>
    Map<${nullablePrimaryKeyType},Boolean> show${field.getName()?cap_first}DetailMap = new HashMap<>();//used to show details in datatable rows    
</#list>

    @Inject
    public void initService() {
        setCrudService(${service});
    }

    public void delete() {
        int deletedEntities = 0;
        for (${entity.getName()} selected : selectionList) {
        	deletedEntities++;
        	${service}.remove(selected);
        }
        selectionList.clear();
        addDetailMessage(deletedEntities + " ${ccEntity}(s) deleted successfully!");
        clear();
    }

    /**
     * Used in datatable footer to display current search criteria
     */
    public String getSearchCriteria() {
        StringBuilder sb = new StringBuilder(21);
        ${entity.getName()} ${ccEntity}Filter = filter.getEntity();
<#list fields as field>
    <#if !entity.isHidden(field)>
        <#if entity.hasToManyAssociation(field)>
            ${field.getType().getSimpleName()}<${entity.getArrayType(field).getSimpleName()}> ${field.getName()} = null;
            if (filter.hasParam("${field.getName()}")) {
                ${field.getName()} = (${field.getType().getSimpleName()}<${entity.getArrayType(field).getSimpleName()}>) filter.getParam("${field.getName()}");
            } else if (has(${ccEntity}Filter.get${field.getName()?cap_first}())) {
                ${field.getName()} = ${ccEntity}Filter.get${field.getName()?cap_first}();
            }
            if (has(${field.getName()})) {
                <#assign s = "<b>${field.getName()}</b>:">
                    sb.append("${s} ");
                    for (${entity.getArrayType(field).getSimpleName()} ${entity.getArrayType(field).getSimpleName()?lower_case} : ${field.getName()}) {
                    sb.append(${entity.getArrayType(field).getSimpleName()?lower_case}).append(", ");
                    }
            }
	<#else>   
		${field.getType().getSimpleName()} ${field.getName()} = null;
        if (filter.hasParam("${field.getName()}")) {
            ${field.getName()} = (${field.getType().getSimpleName()}) filter.getParam("${field.getName()}");
        } else if (has(${ccEntity}Filter.get${field.getName()?cap_first}())) {
            ${field.getName()} = ${ccEntity}Filter.get${field.getName()?cap_first}();
        }
        if (has(${field.getName()})) {
	     <#assign s = "<b>${field.getName()}</b>:">
	        sb.append("${s} ").append(${ccEntity}Filter.get${field.getName()?cap_first}()).append(", ");
        }
        </#if>
        
	</#if>
</#list>
        int commaIndex = sb.lastIndexOf(",");
        if (commaIndex != -1) {
            sb.deleteCharAt(commaIndex);
        }

        if (sb.toString().trim().isEmpty()) {
            return getMessage("empty-search-criteria");
        }

        return sb.toString();
    }

<#list toOneFields as field>
    <#if entity.isAutoCompleteType(field)>
    public List<${field.getType().getSimpleName()}> complete${field.getName()?cap_first}(String query) {
        return ${service}.get${field.getName()?cap_first}sBy${entity.getAssociationDisplayField(field)?cap_first}(query);
    }
   <#elseif entity.isSelectOneMenuType(field)>
    public List<${field.getType().getSimpleName()}> list${field.getName()?cap_first}s() {
        return ${service}.list${field.getName()?cap_first}s();
    }
   </#if>
</#list>

<#list toManyFields as field>
    public void show${field.getName()?cap_first}Detail(${nullablePrimaryKeyType} id) {
        this.show${field.getName()?cap_first}DetailMap.clear();//show details of one row at a time
        this.show${field.getName()?cap_first}DetailMap.put(id,true);
        ${ccEntity}${field.getName()?cap_first} = ${service}.get${field.getName()?cap_first}ById(id);  
    }
    
    public List<${entity.getArrayType(field).getSimpleName()}> list${field.getName()?cap_first}() {
        return ${service}.list${field.getName()?cap_first}();            
    } 

    public List<${entity.getArrayType(field).getSimpleName()}> get${ccEntity}${field.getName()?cap_first}() {
        return ${ccEntity}${field.getName()?cap_first};
    }

    public void set${ccEntity}${field.getName()?cap_first}(List<${entity.getArrayType(field).getSimpleName()}> ${ccEntity}${field.getName()?cap_first}) {
        this.${ccEntity}${field.getName()?cap_first} = ${ccEntity?lower_case}${field.getName()?cap_first};
    }

    public Map<${nullablePrimaryKeyType},Boolean> getShow${field.getName()?cap_first}DetailMap() {
        return show${field.getName()?cap_first}DetailMap;
    }
</#list>

}
