package com.github.adminfaces.starter.service;

import com.github.adminfaces.persistence.model.Filter;
import com.github.adminfaces.persistence.service.CrudService;
import com.github.adminfaces.template.exception.BusinessException;
import org.apache.deltaspike.data.api.criteria.Criteria;
import ${entity.getQualifiedName()};
import ${entity.getQualifiedName()}_;
import ${repository.getQualifiedName()};
import javax.ejb.Stateless;
import javax.inject.Inject;
import java.io.Serializable;
import java.util.*;

<#list fields as field>
   <#if entity.hasToManyAssociation(field)>
import ${entity.getArrayType(field).getQualifiedName()};   
import ${entity.getArrayType(field).getQualifiedName()}_;   
   <#elseif entity.hasToOneAssociation(field)>
import ${field.getType().getQualifiedName()};      
import ${field.getType().getQualifiedName()}_;   
   </#if> 
</#list>

<#if toManyFields?size != 0>
import javax.persistence.TypedQuery;
import javax.persistence.NoResultException;
import javax.persistence.criteria.JoinType;
</#if>

<#if toOneFields?size != 0>
import javax.persistence.criteria.JoinType;
</#if>
import static com.github.adminfaces.template.util.Assert.has;


 
@Stateless
public class ${entity.getName()}Service extends CrudService<${entity.getName()}, ${nullablePrimaryKeyType}> implements Serializable {

    @Inject
    protected ${entity.getName()}Repository ${ccEntity}Repository;// you can use repositories to extract complex queries from your service


    /** 
     * This method is used for (real) pagination and is called by lazy 
     * PrimeFaces datatable on list page
     *
     * @param filter holds restrictions populated on the list page
     * @return a criteria populated with given restrictions 
     */ 
    protected Criteria<${entity.getName()}, ${entity.getName()}> configRestrictions(Filter<${entity.getName()}> filter) {
        Criteria<${entity.getName()}, ${entity.getName()}> criteria = criteria();
        
<#list fields as field>
    <#if !entity.isHidden(field)>
        if (filter.hasParam(${entity.getName()}_.${field.getName()}.getName())) {
        <#if !entity.hasAssociation(field)>
            criteria.eq(${entity.getName()}_.${field.getName()}, <#if field.getType().getSimpleName() == "Integer">filter.getIntParam(${entity.getName()}_.${field.getName()}.getName())<#elseif field.getType().getSimpleName() == "Long">filter.getLongParam(${entity.getName()}_.${field.getName()}.getName())<#elseif field.getType().getSimpleName() == "Boolean">filter.getBooleanParam(${entity.getName()}_.${field.getName()}.getName())<#elseif field.getType().getSimpleName() == "Double">filter.getDoubleParam(${entity.getName()}_.${field.getName()}.getName()) <#else>(${field.getType().getSimpleName()})filter.getParam(${entity.getName()}_.${field.getName()}.getName())</#if>);   
        <#elseif entity.hasToManyAssociation(field)>
            <#assign t = entity.getArrayType(field).getSimpleName() >
            criteria.join(${entity.getName()}_.${field.getName()}, where(${t}.class)
                .in(${t}_.id, toListOfIds((${field.getType().getSimpleName()}<${entity.getArrayType(field).getSimpleName()}>) filter.getParam(${entity.getName()}_.${field.getName()}.getName()), new ${nullablePrimaryKeyType}[0])));   
        <#elseif entity.hasToOneAssociation(field)>
            criteria.join(${entity.getName()}_.${field.getName()},
                where(${field.getType().getSimpleName()}.class)
               .eq(${field.getType().getSimpleName()}_.id, ((${field.getType().getSimpleName()}) filter.getParam("${field.getName()}")).getId()));
        </#if>
        }  
	</#if>
</#list>

        //create restrictions based on filter entity
        if (has(filter.getEntity())) {
            ${entity.getName()} filterEntity = filter.getEntity();
            
<#list fields as field>
	<#if !entity.isHidden(field)>
	        if (has(filterEntity.get${field.getName()?cap_first}())) {
            <#if !entity.hasAssociation(field)>
                 criteria.eq(${entity.getName()}_.${field.getName()}, filterEntity.get${field.getName()?cap_first}());   
            <#elseif entity.hasToManyAssociation(field)>
            <#assign t = entity.getArrayType(field).getSimpleName() >
                 criteria.join(${entity.getName()}_.${field.getName()}, where(${t}.class)
 	  	    .in(${t}_.id, toListOfIds(filterEntity.get${field.getName()?cap_first}(), new ${nullablePrimaryKeyType}[0])));   
            <#elseif entity.hasToOneAssociation(field)>
                 criteria.join(${entity.getName()}_.${field.getName()},
                    where(${field.getType().getSimpleName()}.class, JoinType.LEFT)
                    .eq(${field.getType().getSimpleName()}_.id, filterEntity.get${field.getName()?cap_first}().getId()));
            </#if>
	        }  
	</#if>
</#list>
        }
        return criteria;
    }
    
    public void beforeInsert(${entity.getName()} ${ccEntity}) {
        validate(${ccEntity});
    }

    public void beforeUpdate(${entity.getName()} ${ccEntity}) {
        validate(${ccEntity});
    }

<#if toManyFields?size != 0>
    @Override
    public void beforeRemove(${entity.getName()} ${ccEntity}) {
<#list toManyFields as field>
        Criteria<${entity.getName()}, ${entity.getName()}> ${entity.getName()?lower_case}${field.getName()?cap_first}Criteria = criteria().
            join(${entity.getName()}_.${field.getName()}, where(${entity.getArrayType(field)}.class, JoinType.LEFT)
                .eq(${entity.getArrayType(field)}_.${ccEntity}, ${ccEntity}));
        
        if(count(${entity.getName()?lower_case}${field.getName()?cap_first}Criteria) > 0) {
            throw new BusinessException("Cannot remove "+${ccEntity}.get${entity.getDisplayField()?cap_first}() + " because it has ${field.getName()} associated.");
        }
</#list>

    }
</#if>

    public void validate(${entity.getName()} ${ccEntity}) {
        BusinessException be = new BusinessException();

        /** just an example of validation
        if (!car.hasModel()) {
            be.addException(new BusinessException("Car model cannot be empty"));
        }
        if (!car.hasName()) {
            be.addException(new BusinessException("Car name cannot be empty"));
        }

        if (!has(car.getPrice())) {
            be.addException(new BusinessException("Car price cannot be empty"));
        } 

        if (count(criteria()
                .eqIgnoreCase(Car_.name, car.getName())
                .notEq(Car_.id, car.getId())) > 0) {

            be.addException(new BusinessException("Car name must be unique"));
        }
        **/

        //if there is exceptions enqueued then throw them. Each business exception will be transformed into a JSF error message and displayed on the page
        if (has(be.getExceptionList())) {
            throw be;
        }
    }

<#list toOneFields as field>
    <#if entity.isAutoCompleteType(field)>
    public List<${field.getType().getSimpleName()}> get${field.getName()?cap_first}sBy${entity.getAssociationDisplayField(field)?cap_first}(String query) {
        return criteria(${field.getType().getSimpleName()}.class)
               .likeIgnoreCase(${field.getType().getSimpleName()}_.${entity.getAssociationDisplayField(field)}, "%" + query + "%")
               .getResultList();
    }
    <#elseif entity.isSelectOneMenuType(field)>
    public List<${field.getType().getSimpleName()}> list${field.getName()?cap_first}s() {
        return criteria(${field.getType().getSimpleName()}.class)  
                .getResultList();      
    }
   </#if>  
</#list>    
<#list toManyFields as field>
    <#if entity.isCheckboxMenuType(field) || entity.isSelectManyMenuType(field)>
    public List<${entity.getArrayType(field).getSimpleName()}> get${field.getName()?cap_first}ById(${nullablePrimaryKeyType} ${ccEntity}Id) {
         return getEntityManager().createQuery("select r from ${entity.getArrayType(field).getSimpleName()} r where r.${ccEntity}.id =:id",${entity.getArrayType(field).getSimpleName()}.class)
                .setParameter("id",${ccEntity}Id)
                .getResultList(); 
    }

    public List<${entity.getArrayType(field).getSimpleName()}> list${field.getName()?cap_first}() {
          return criteria(${entity.getArrayType(field).getSimpleName()}.class)  
                 .getResultList();      
    }
    </#if>
</#list>

<#if toManyFields?size != 0>
    @Override
    public ${entity.getName()} findById(Serializable id) {
        TypedQuery<${entity.getName()}> findById = getEntityManager().createQuery("select s from ${entity.getName()} s <#list toManyFields as field>left join fetch s.${field.getName()}</#list>  where s.id = :id", ${entity.getName()}.class)
            .setParameter("id", id);
        try {
            return findById.getSingleResult();
        } catch (NoResultException nre) {
            return null;
        }
    }
</#if>
 
}
