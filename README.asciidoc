= AdminFaces Addon
:page-layout: base
:toc: preamble
:source-language: java
:icons: font
:linkattrs:
:sectanchors:
:sectlink:
:numbered:
:doctype: book
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:

image:https://travis-ci.org/adminfaces/admin-addon.svg[Build Status (Travis CI), link=https://travis-ci.org/adminfaces/admin-addon]
image:https://coveralls.io/repos/adminfaces/admin-addon/badge.svg?branch=master&service=github[Coverage, link=https://coveralls.io/r/adminfaces/admin-addon] 

This forge addon enables http://github.com/adminfaces/[AdminFaces^] `setup`, `scaffold from JPA entities`, `test-setup`,  `new service tests` and `scaffold config` commands.
 
image::img/admin-addon.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/admin-addon.png?raw=true"]

== Installation

Use install addon from git command:

----
addon-install-from-git --url https://github.com/adminfaces/admin-addon.git
----

`or` install from catalog:

image::img/install-from-catalog.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/install-from-catalog.png?raw=true"]

== Commands 

=== *AdminFaces: Setup*

====
It will install AdminFaces dependencies, resources and initial configuration.
====

=== *AdminFaces: Scaffold*
 
====
In order to enable *scaffold generate* command you first need to execute *Scaffold setup* command.

`Scaffold generate` will create crud, including list, form pages and menu entry, on top of selected entities. The generated crud is based on http://github.com/adminfaces/admin-persistence/[admin-persistence^] framework.
====

image::img/scaffold-setup.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/scaffold-setup.png?raw=true"]

image::img/scaffold-generate01.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/scaffold-generate01.png?raw=true"]
 
image::img/scaffold-generate02.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/scaffold-generate02.png?raw=true"] 

==== Scaffold limitations

To get most of scaffold command and to not generate invalid code, follow these two rules:

. Use *field based access* on your JPA entities, more https://thoughts-on-java.org/access-strategies-in-jpa-and-hibernate/[details here^]. The scaffold command *doesn't support* method (property) based access.
. Use bidirectional relationships, https://thoughts-on-java.org/hibernate-tips-map-bidirectional-many-one-association/[see here^]

==== Generate entities from database

The recommended way to generate JPA entities from database is to use NetBeans, https://www.javacodegeeks.com/2016/02/netbeans-java-ee-tip-1-entity-classes-database.html[see here^].

It will use field based access and depending on your database schema it will use bidirectional associations.
 
=== *AdminFaces: Scaffold config*

====
After scaffold generation the addon will create default scaffold configuration files under `src/main/resources/scaffold` for each entity and also a `global-config.yml` file. These configuration files default values are based on the entities provided on scaffold generation and the global file. 

In order to change scaffold configuration for each entity or the global configuration you either can edit the files manually or use *AdminFaces: Scaffold config* command.
====

image::img/admin-scaffold-config01.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/admin-scaffold-config01.png?raw=true"]

image::img/admin-scaffold-config02.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/admin-scaffold-config02.png?raw=true"]

image::img/admin-scaffold-config03.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/admin-scaffold-config03.png?raw=true"] 

image::img/admin-scaffold-config04.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/admin-scaffold-config04.png?raw=true"]


=== *AdminFaces: Test harness setup*
====
It will setup `integration tests` dependencies and resource files such as https://deltaspike.apache.org/documentation/test-control.html[DeltaSpike test control^] and https://github.com/database-rider/database-rider[Database Rider^]. 
====

image::img/test-harness-setup.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/test-harness-setup.png?raw=true"]

==== *AdminFaces: New service test*
====
The `Test harness setup` command will enable the *New service test* which will generate integration tests based on service classes. The command will also generare `dbunit yml datasets` based on the service entity.
====

image::img/admin-new-service-test.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/admin-new-service-test.png?raw=true"]

image::img/admin-new-service-test02.png[link="https://github.com/adminfaces/admin-addon/blob/master/img/admin-new-service-test02.png?raw=true"]

TIP: Use https://github.com/database-rider/dbunit-addon[dbunit-addon] to `generate test datasets`.
